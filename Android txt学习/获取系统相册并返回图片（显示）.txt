获取系统相册，并返回图片

首先判断权限
              if (ContextCompat.checkSelfPermission(MainActivity.this,
                        android.Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED){
                    ActivityCompat.requestPermissions(MainActivity.this,
                            new String[]{android.Manifest.permission.WRITE_EXTERNAL_STORAGE},1);
                }else {
                    xiangce();
                }

其次呢对权限处理
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        switch (requestCode){
            case 1:
                if (grantResults.length>0&&grantResults[0]==PackageManager.PERMISSION_GRANTED){
                    xiangce();
                }else {
                    Toast.makeText(this, "没有权限", Toast.LENGTH_SHORT).show();
                }
                break;
        }
    }

一个打开系统相册方法
    private void xiangce() {
        Intent intent=new Intent("android.intent.action.GET_CONTENT");
        intent.setType("image/*");
        startActivityForResult(intent,XIANGCE_RESULT);
    }

在onActivityResult对数据处理
               if (resultCode==RESULT_OK){
                    if (Build.VERSION.SDK_INT>19){//判断手机版本号
                        handerImageOnkitkat(data);//在Android4.4之后处理图片
                    }else {
                        handerImageBeforekitkat(data);//在Android4.4之前处理图片
                    }
                }

在Android4.4之前处理图片
    private void handerImageBeforekitkat(Intent data) {
        Uri uri = data.getData();
        String imagePath=getImagePath(uri,null);
        displayImage(imagePath);

    }
在Android4.4之后处理图片
    private void handerImageOnkitkat(Intent data) {
        String imagePath=null;
        Uri uri=data.getData();
//如果是document类型的Uri，则通过document id处理
        if (DocumentsContract.isDocumentUri(this,uri)){
            String docId=DocumentsContract.getDocumentId(uri);
            if ("com.android.providers.media.documents".equals(uri.getAuthority())){
                String id=docId.split(":")[1];//解析数字格式的id
                String selection=MediaStore.Images.Media._ID+"="+id;
                imagePath=getImagePath(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,selection);
            }else if ("com.android.providers.downloads.documents".equals(uri.getAuthority())){
                Uri contentUri=ContentUris.withAppendedId(Uri.parse(
                        "content://downloads/public_downloads"),Long.valueOf(docId));
                imagePath=getImagePath(contentUri,null);
            }
//如果是content类型的Uri，则通过普通方式处理
        }else if ("content".equalsIgnoreCase(uri.getScheme())){
            imagePath=getImagePath(uri,null);
//如果是file文件的Uri，直接获取图片路径
        }else if ("file".equalsIgnoreCase(uri.getScheme())){
            imagePath=uri.getPath();
        }
        displayImage(imagePath);
    }


创建一个公有的方法，去获取图片的路径，并返回
    private String getImagePath(Uri uri, String selection) {
        String path=null;
        Cursor cursor = getContentResolver().query(uri, null, selection, null, null);
        if (cursor!=null){
            if (cursor.moveToFirst()){
                path=cursor.getString(cursor.getColumnIndex(MediaStore.Images.Media.DATA));
            }
            cursor.close();
        }
        return path;
    }

创建一个公有的方法，通过路径来显示图片
    private void displayImage(String imagePath) {
        if (imagePath!=null){
            Bitmap bitmap=BitmapFactory.decodeFile(imagePath);
            mIvShowPic.setImageBitmap(bitmap);
        }
    }














